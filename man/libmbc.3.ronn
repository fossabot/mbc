# libmbc(3) -- Encrypt and decrypt data using the MBC algorithm

## SYNOPSIS

`#include <libmbc.h>`

`bool mbc_set_user_key(const uint8_t *`<key>`, size_t` <key_size>`);`

`void mbc_free(void);`

`void mbc_encode_inplace(uint8_t *`<data>`, size_t` <data_size>`);`

`void mbc_decode_inplace(uint8_t *`<data>`, size_t` <data_size>`);`

`uint8_t* mbc_encode(const uint8_t *`<data>`, size_t` <data_size>`);`

`uint8_t* mbc_decode(const uint8_t *`<data>`, size_t` <data_size>`);`

`char* mbc_encode_to_hex(const uint8_t *`<raw_in>`, size_t` <raw_size>`, bool` <uppercase>`);`

`uint8_t* mbc_decode_from_hex(const char *`<hex_in>`, size_t *`<decoded_size_ptr>`);`

`char* mbc_raw_to_hex(const uint8_t *`<raw>`, size_t` <raw_size>`, bool` <uppercase>`);`

`uint8_t* mbc_hex_to_raw(const char *`<hex>`, size_t *`<raw_size_ptr>`);`

## DESCRIPTION

Before an encoding/decoding session, a key should be set using `mbc_set_user_key()` and freed afterwards with a `mbc_free()`.  
Using a <key_size> of 0 will result in undefined behavior.

`mbc_encode_inplace()` encodes an array of bytes by altering it directly.  
A <data_size> of 0 results in nullipotence.

`mbc_decode_inplace()` decodes an array of bytes by altering it directly.  
A <data_size> of 0 results in nullipotence.

`mbc_encode()` encodes an array of bytes in a new array.  
A <data_size> of 0 causes undefined behavior.

`mbc_decode()` decodes an array of bytes in a new array.  
A <data_size> of 0 causes undefined behavior.

`mbc_encode_to_hex()` encodes an array of bytes in a hexadecimal C string. If <uppercase> is true, uppercase letters are produced.  
A <data_size> of 0 produces an empty string.

`mbc_decode_from_hex()` decodes a hexadecimal C string in a new array of bytes and <*raw_size_ptr> will contain its size.  
An empty string causes undefined behavior.

`mbc_raw_to_hex()` converts an array of bytes into a hexadecimal C string. If <uppercase> is true, uppercase letters are used.  
A <data_size> of 0 produces an empty string.

`mbc_hex_to_raw()` converts a hexadecimal C string into an array of bytes with <*raw_size_ptr> containing its size.  
An empty string causes undefined behavior.

## SECURITY CONSIDERATIONS

This library shall not be used in any production environment, nor for any kind of cryptographic purposes, since it does NOT provide a secure encryption algorithm.

This software is developed just for fun and educational purposes and is therefore provided "as is", without warranty of any kind.

## AUTHORS

Matteo Bernardini & Marco Bonelli

## REPORTING BUGS

Report bugs here: https://github.com/mttbernardini/mbc/issues

## COPYRIGHT

Copyright (c) 2017 Matteo Bernardini  
Copyright (c) 2017 Marco Bonelli

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
